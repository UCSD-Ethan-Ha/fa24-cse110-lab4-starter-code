{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ethan\\\\fa24-cse110-lab4-starter-code\\\\src\\\\context\\\\AppContext.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\n\n// Exercise: Create add budget to the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  expenses: [],\n  setExpenses: () => {},\n  addBudget: () => []\n};\nexport const AppContext = /*#__PURE__*/createContext(initialState);\n\n//im pretty confident abt everything for exercise 1 except for the AppProvider fnc with the const addBudget here\nexport const AppProvider = props => {\n  _s();\n  const [expenses, setExpenses] = useState(initialState.expenses);\n  const addBudget = newExpense => {\n    setExpenses(prevExpenses => prevExpenses.concat(newExpense));\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      expenses: expenses,\n      setExpenses: setExpenses,\n      addBudget: addBudget\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(AppProvider, \"g9EH09mqrENP3bpYoZQXvbHpsFs=\");\n_c = AppProvider;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["createContext","useState","jsxDEV","_jsxDEV","initialState","expenses","setExpenses","addBudget","AppContext","AppProvider","props","_s","newExpense","prevExpenses","concat","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Ethan/fa24-cse110-lab4-starter-code/src/context/AppContext.tsx"],"sourcesContent":["import { createContext, useState } from \"react\";\r\nimport { Expense } from \"../types/types\";\r\n\r\n// Exercise: Create add budget to the context\r\n\r\ninterface AppContextType {\r\n  expenses: Expense[];\r\n  setExpenses: React.Dispatch<React.SetStateAction<Expense[]>>;\r\n  //idk if it's supposed to return anything but if it is then replace \"void\" with w/e\r\n  addBudget: (expenses: Expense) => void;\r\n}\r\n\r\nconst initialState: AppContextType = {\r\n  expenses: [],\r\n  setExpenses: () => { },\r\n  addBudget: () => [],\r\n};\r\n\r\nexport const AppContext = createContext<AppContextType>(initialState);\r\n\r\n\r\n//im pretty confident abt everything for exercise 1 except for the AppProvider fnc with the const addBudget here\r\nexport const AppProvider = (props: any) => {\r\n  const [expenses, setExpenses] = useState<Expense[]>(initialState.expenses);\r\n  const addBudget = (newExpense: Expense) => {\r\n    setExpenses((prevExpenses) => prevExpenses.concat(newExpense));\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        expenses: expenses,\r\n        setExpenses: setExpenses,\r\n        addBudget: addBudget,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;;AAG/C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AASA,MAAMC,YAA4B,GAAG;EACnCC,QAAQ,EAAE,EAAE;EACZC,WAAW,EAAEA,CAAA,KAAM,CAAE,CAAC;EACtBC,SAAS,EAAEA,CAAA,KAAM;AACnB,CAAC;AAED,OAAO,MAAMC,UAAU,gBAAGR,aAAa,CAAiBI,YAAY,CAAC;;AAGrE;AACA,OAAO,MAAMK,WAAW,GAAIC,KAAU,IAAK;EAAAC,EAAA;EACzC,MAAM,CAACN,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAYG,YAAY,CAACC,QAAQ,CAAC;EAC1E,MAAME,SAAS,GAAIK,UAAmB,IAAK;IACzCN,WAAW,CAAEO,YAAY,IAAKA,YAAY,CAACC,MAAM,CAACF,UAAU,CAAC,CAAC;EAChE,CAAC;EAED,oBACET,OAAA,CAACK,UAAU,CAACO,QAAQ;IAClBC,KAAK,EAAE;MACLX,QAAQ,EAAEA,QAAQ;MAClBC,WAAW,EAAEA,WAAW;MACxBC,SAAS,EAAEA;IACb,CAAE;IAAAU,QAAA,EAEDP,KAAK,CAACO;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAE1B,CAAC;AAACV,EAAA,CAjBWF,WAAW;AAAAa,EAAA,GAAXb,WAAW;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}